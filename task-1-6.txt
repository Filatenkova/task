1. Опишите как вы решите задачу: необходимо раз в день записывать первую новость с главной страницы Яндекса в инфоблок.
Ответ:
Используем bitrix:rss.show
Вычисляем первую новость
Добавляем в инфоблок с помощью CIBlockElement::Add

2. Можно ли каким-то образом выводить часть вёрстки, отдаваемой неким компонентом, выводить до вызова этого компонента?
Желательно указать методы и классы.
Ответ:
Используем подключение компонента через
ob_start();
$APPLICATION->IncludeComponent(
    'developer:newcomponent',
    'simple',
    [
        'CACHE_TIME' => 3600
    ],
    false
);
$component = ob_get_contents();
ob_end_clean();

В компоненте developer:newcomponent объявим кусок кода для вывода:
<?php
$this->SetViewTarget('content_id');
?>
<div>
    Вложенный компонент
</div>
<?php
$this->EndViewTarget();
?>

В основном компоненете выводим необходимую часть верстки с помощью $APPLICATION->ShowViewContent('content_id');

3. В чём различие методов Fetch(), GetNext() и GetNextElement() класса CDBResult?
Каким методом можно узнать, сколько записей вернула выборка? Можно текстом.
Ответ:
Fetch() - возвращает массив полей в ассоциативном виде,
GetNext() - делает то же самое, что и Fetch() + преобразует значения в html-безопасный вид
GetNextElement() - делает то же, что и GetNext() + возвращает объект _CIBElement, который содержит дополнительные методы для того, чтобы получить поля элемента и его свойства.
SelectedRowsCount() - возвращает количество выбранных записей

4. Опишите как можно передать ajax запрос на сервер. Frontend и backend части.
Ответ:
Пример моей работы с ajax можно посмотреть здесь - https://github.com/Filatenkova/COMPONENT
В шаблоне объявляем прототип:
<script>
    new SubordinateTree({
        selectors: {
            viewSubordinate: '[data-action="viewSubordinate"]',
            usersContainer: '[data-users-container]',
            visibleTree: '[data-visible-tree-container]',
            errorsContainer: '[data-errors-container]',
        }
    });
</script>
В script.js (https://github.com/Filatenkova/COMPONENT/blob/master/directory/templates/directory/script.js) через BX.ajax.runComponentAction передаем данные из шаблона в class.php
Далее выполняем компонент в аяксовом режиме
Другую реализацию я не использовала в своей работе, поэтому не буду писать о том, чего не знаю.

5. Опишите структуру файлов и папок в шаблона компонента.
Ответ:
- Файл class.php для работы для получения и обработки данных
- Файл .parameters.php для установки параметров компонента
- Файл .description.php для описания компонента
- Папки lang, хранящие lang-овые файлы
- Папка templates, хранящая папки шаблонов компонента
- Папки шаблонов компонента вида templates/simple
- Файл template.php в папке шаблона компонента для интеграции верстки и вывода полученных в class.php данных
- Файл script.js для работы с js
- Файл style.css для работы со стилями
- Файл result_modifier.php для модификации данных работы компонента произвольным образом.
- Файл component_epilog.php для модификации данных работы компонента с включенным кешированием.

6. Опишите структуру файлов и папок модуля.
Ответ:
- /install/index.php - основной файл, код которого отвечает собственно за инсталляцию/деинсталляцию модуля
- /install/step.php - файлы, которые показываются при установке модуля
- /install/unstep.php - файлы, которые показываются при деинсталляции модуля
- /install/version.php - содержит информацию о версии модуля
- Папки lang, хранящие lang-овые файлы
- Папка lib - API (классы, логика) модуля
- /install/components - для компонентов, которые поставляются с модулем
Подробная структура модуля описана на странице документации Битрикс - https://dev.1c-bitrix.ru/learning/course/?COURSE_ID=43&LESSON_ID=2823
C модулями почти не работала, была одна задача, где требовалось доработать модуль
